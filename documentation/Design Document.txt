Game Design Document: "10,000 Games Collection"
Core Design Document

High Concept
An idle/incremental game that satirizes 90s/2000s shovelware CD-ROM collections. Players unlock terrible minigames to gain new bullet types for an increasingly impossible bullet-hell shooter. Each game has a visible performance-based formula that determines its bullet power and token generation - play better, get stronger bullets. The game boots into a fake Windows OS where different programs serve gameplay functions, creating an authentic retro computing experience while naturally evolving from active skill-based play to idle spectacle.
Target Playtime: 8-10 hours to completion
Platform: PC (Steam, itch.io) - Native builds only
Engine: Love2D (Lua)
Architecture: MVC (Model-View-Controller)
Genre: Idle/Incremental, Bullet Hell, Parody/Satire
Tone: Self-aware nostalgia, affectionate mockery of shovelware era

Core Innovation: Performance-Based Bullet Power
The Formula System
Every game displays its power formula in the launcher/shop:

Formulas are visible BEFORE unlocking
Performance metrics determine bullet damage
Same formula applies to token generation
Better performance = stronger bullets AND more tokens

Example Formulas:
Space Shooter 1:  Power = (Kills - Deaths) × 1
Space Shooter 7:  Power = (Kills - Deaths) × 7
Space Shooter 50: Power = (Kills - Deaths) × 50
Snake Classic:    Power = Snake Length × (Seconds Survived ÷ 10)
Memory Match:     Power = Matches Found × Time Bonus
Click Master:     Power = Clicks ÷ Time Taken × 10
Dodge Extreme:    Power = Asteroids Dodged² ÷ Collisions
Why This Works:

Creates skill expression in individual games
Incentivizes replaying games for better scores
More expensive games have better multipliers in formulas
Natural progression: get better at games → unlock stronger variants
Transparent optimization (players can see what to improve)
Players can specialize in game types they enjoy
Multiple paths to power (avoid games you dislike)

Performance Tracking
Each game tracks relevant metrics:

Levels completed
Deaths/failures
Time taken
Objects collected/destroyed
Accuracy
Survival time
Perfect completion bonuses

Stored per game:

Best performance (used for bullet power)
Total completions (for statistics)
Auto-play average (for passive generation)

Auto-Play Mechanics
When games auto-play in VMs:

Use average/consistent performance (not best)
Token generation based on auto-play formula result
Can be improved by replaying manually for better score
Creates incentive to optimize even automated games


Core Gameplay Loop
Primary Loop

Play "ULTIMATE SPACE DEFENDER" - attempt current level with available bullets
Hit wall - boss/enemies have too much HP for current arsenal
Browse Game Collection - review formulas and performance requirements
Unlock and play games - try to maximize performance for power
Optimize performance - replay games for better scores (optional)
Configure automation - assign games to VMs for passive tokens
Return to Space Defender - push further with stronger arsenal
Repeat - iterate until all levels complete

Meta-Optimization Loop

See weak bullet → check its formula → replay for better score → bullet improves
See low token generation → improve game performance → VM generates more
Balance time between: new unlocks vs. optimizing existing games

Progression Philosophy

No traditional prestige/reset - Pure forward progression
Level completion = permanent bonuses - Fire rate, damage multipliers, new game tiers
Performance = Power - Skill expression matters across all minigames
Natural evolution - Active skill gameplay → hybrid → idle spectacle as bullet count increases


Main Game: "ULTIMATE SPACE DEFENDER"
Overview
A vertical-scrolling bullet hell shooter styled after 19xx/Raiden/1942. The centerpiece that gives purpose to all progression.
Core Mechanic: Games = Bullets

Every unlocked game = new bullet type added to arsenal
Bullet damage determined by game's performance formula
All bullets fire simultaneously from player's ship
Visual and functional escalation from 1 bullet to 500+

Level Structure
Total: 20 Levels
Each level consists of:

Multiple waves of enemies
Unique boss at end
Escalating HP requirements
Level completion bonuses

Level Progression:

Early (1-5): Active play required, manual dodging critical
Mid (6-12): Hybrid play, still dodging but less precise
Late (13-20): Idle spectacle, auto-dodge handles survival

Level Completion Bonuses (Soft Prestige)

Fire Rate Bonuses - All bullets fire faster after certain levels
Damage Multipliers - All bullets deal more damage (multiplies formula results)
Tier Unlocks - New categories of games unlock at milestone levels
Token Multipliers - Token generation increases after beating levels

No resets, only additive permanent bonuses that stack.
Player Systems

HP - Upgradeable health pool
Bombs - Screen-clearing special ability
Movement Speed - Upgradeable
Auto-Dodge - Unlockable AI dodging system (late game enables idle play)
Fire Rate - Affects all bullets globally
Damage Modifier - Multiplies all bullet power results

Bullet Properties
Each bullet type has:

Base Power - Determined by performance formula result
Fire Rate - Individual rate (affected by global multiplier)
Special Property - Spread, homing, pierce, etc. (based on game type)
Visual - Sprite/color based on game theme


The Shovelware Collection
Purpose
Each game unlocked = new bullet type + passive token generation
Unlock Flow

Player views game in launcher - sees formula and requirements
Pays tokens to unlock game
Plays game and achieves performance score
Score applied to formula → determines bullet power and token rate
Can replay anytime to improve score (improves bullet and token generation)
Can assign to VM for continuous passive tokens (uses auto-play performance)

Game Tiers
Trash Tier (70% of library)

Ultra-simple mechanics
Simple formulas with low multipliers
Easy to get decent scores
Cheap unlock cost
Example: (Score ÷ 10) × 1

Mid Tier (25% of library)

More involved gameplay
Better formulas with medium multipliers
Requires some skill for good scores
Moderate unlock cost
Example: (Score ÷ 10) × 5

Premium Tier (5% of library)

Actually decent games
Excellent formulas with high multipliers
Requires skill/strategy for good scores
Expensive unlock cost
Example: (Score ÷ 10) × 20

Clone Variants and Formulas
How Clones Differ:

Same base gameplay
Different sprite themes
Different multipliers in formula

Example: Alien Shooter Family
Alien Shooter 1:    Power = (Aliens Killed - Deaths) × 1
Alien Shooter 2:    Power = (Aliens Killed - Deaths) × 1.2
Alien Shooter 5:    Power = (Aliens Killed - Deaths) × 1.5
Alien Shooter 10:   Power = (Aliens Killed - Deaths) × 2
Alien Shooter 50:   Power = (Aliens Killed - Deaths) × 10
Why This Works:

Progression: unlock stronger multiplier variants
Same skill transfers (you're good at all Alien Shooter variants)
Clear upgrade path within family
More expensive = better multiplier

Performance Metrics by Game Type
Shooter Games:

Enemies killed
Deaths
Accuracy (hits ÷ shots)
Levels completed
Time bonus

Dodge Games:

Objects dodged
Collisions
Survival time
Perfect dodges

Puzzle Games:

Matches/solutions
Time taken
Moves used
Perfect completion bonus

Arcade Games:

Score achieved
Lives remaining
Time bonus
Combo multipliers

Token Generation Formula
Token generation rate = Same formula as bullet power

Better performance = more bullets damage AND more tokens
Creates unified incentive to play well
Auto-play uses average performance (slightly lower than best)


Automation System
Virtual Machines (VMs)
Concept: "Install" VMs to run games automatically in background
Properties:

Start with 1 VM, purchasable up to 30
Each VM runs one game continuously
Games auto-complete based on average performance (not best)
Token generation based on auto-play performance formula

Auto-Play Performance:

Simulated performance (not random)
Typically 70-80% of player's best performance
Consistent - doesn't vary between cycles
Can be improved by replaying manually for higher best score

Example:
Player's best: Alien Shooter 1 - 50 kills, 2 deaths = (50-2) × 1 = 48 power
Auto-play: Simulated 35 kills, 1 death = (35-1) × 1 = 34 power
VM generates tokens based on 34 power every cycle
Upgrades:

CPU Upgrade - Reduces cycle time (completes faster)
Overclock - Increases auto-play performance (85-90% of best)
Multi-threaded - Late game, allows 2 games per VM

VM Manager Program
Fake program window for configuring automation:

Grid of VM slots (empty or active)
Drag-and-drop game assignment
Shows game's auto-play power and token rate
Progress bars showing cycle completion
Total tokens per minute display
Purchase/upgrade buttons


Token Economy
Token Sources

Manual minigame completion - Based on performance formula
Replaying for better scores - Difference between old and new performance (encourages optimization)
VM automation - Continuous passive generation based on auto-play performance
Level completion rewards - Fixed bonuses

Token Sinks

Unlocking new games - Higher tier = more expensive
Purchasing VMs - Expand automation capacity
Upgrading automation - CPU speed, overclock, multi-thread
Upgrading Space Defender - HP, bombs, fire rate, movement, auto-dodge

Token Multipliers
Applied to all generation sources:

Based on highest Space Defender level completed
Creates satisfying power spikes
Encourages pushing levels vs. pure grinding

Economy Philosophy

Early game: Focus on unlocking and playing games well
Mid game: Balance unlocking new games vs. optimizing existing ones
Late game: Optimize premium games, max automation
Performance matters throughout - not just unlock count


The Fake OS Layer
Purpose

Enhances authenticity and immersion
Different programs serve gameplay functions
Adds humor and discovery
Provides structure for monetization (cosmetic themes)

Desktop Environment
Style: Windows 98 (default)
Elements:

Desktop with wallpaper and icons
Taskbar with start menu, clock, system tray
Windows with title bars, borders, buttons
Mouse cursor (can be themed)

Functional Programs
My Computer

File explorer showing drives
CD-ROM drive launches Game Collection
Fake folders with Easter eggs

Game Collection Launcher

Browse games by category/tier
View game formulas and requirements
See current performance scores
Purchase and launch games
Filter/sort options

VM Manager

Configure automation
Assign games to VM slots
View auto-play performance vs. best
See projected token generation
Purchase upgrades

Space Defender Launcher

Level select
View unlocked bullets and their power
See total DPS calculation
Launch levels

Task Manager (optional)

View running VMs
Monitor resource usage (fake)
End processes to stop VMs

CheatEngine (optional)

Game modifiers
Speed-up auto-play (costs tokens)
View detailed performance stats

Fake Website (optional)

Early 2000s aesthetic
Shop for game collections
View fake reviews
Purchase bulk unlocks


UI/UX Design
Formula Display Philosophy
In Game Launcher:
┌─────────────────────────────────┐
│  ALIEN SHOOTER 7                │
│  [Thumbnail]                    │
│                                 │
│  Cost: 150 tokens               │
│  Tier: Trash                    │
│                                 │
│  POWER FORMULA:                 │
│  (Kills - Deaths) × 7           │
│                                 │
│  Your Best: 48 × 7 = 336 dmg   │
│  Auto-Play: 34 × 7 = 238 dmg   │
│  Token Rate: 238 / minute       │
│                                 │
│  [UNLOCK] [PLAY] [ASSIGN TO VM] │
└─────────────────────────────────┘
Design Principles:

Formula always visible
Current performance shown
Clear relationship: performance → power → tokens
Comparison between manual best and auto-play
Encourages optimization

Performance Feedback
After Completing Game:
GAME COMPLETE!

Your Performance:
- Aliens Killed: 52
- Deaths: 1
- Score: (52 - 1) × 7 = 357

Previous Best: 336
NEW RECORD! +21 power

Bullet power increased: 336 → 357
Token generation improved: 238 → 252/min

[REPLAY] [RETURN TO LAUNCHER]
Shows:

Exact performance metrics
Formula calculation
Comparison to previous best
Impact on both bullet and tokens
Encourages replaying for optimization


Progression Structure
Early Game (Levels 1-5)
Focus: Learning and Unlocking

Unlock trash tier games
Learn formula system
Play games for first time
Set up initial automation
Push through early Space Defender levels

Player Activity:

Mostly manual play
Frequent game unlocks
Experimentation with different games
Active Space Defender gameplay

Mid Game (Levels 6-12)
Focus: Optimization and Expansion

Unlock mid-tier games
Replay games for better scores
Expand VM count
Automation becomes significant
Hybrid Space Defender play

Player Activity:

Balance: new unlocks vs. optimizing existing
Strategic VM assignments
Upgrading automation
Still actively playing Space Defender

Late Game (Levels 13-20)
Focus: Perfection and Idle

Unlock premium games
Optimize high-value games
Max automation systems
Space Defender becomes idle spectacle
Final pushes with massive bullet counts

Player Activity:

Targeted optimization of best games
Fine-tuning VM loadouts
Mostly automated
Check in periodically
Watch bullet storm victory


Monetization (Optional Cosmetic DLC)
OS Theme Packs ($2 each)

Windows XP, Vista, 7, Linux themes
Pure visual changes
No gameplay impact
Includes minor bonuses:

Desktop buddy (Clippy parody)
Extra wallpapers
Working Pinball game (just for fun)



Supporter Pack ($5)

All themes
Exclusive desktop buddy variants
Custom game icons
Name in credits
Still no gameplay advantages

What We Won't Do:

Pay-to-win
Formula modifiers
Token packs
Performance boosters
Time skips


Core Design Pillars

Performance Matters - Skill expression across all minigames through visible formulas
Transparent Systems - Players understand exactly how performance → power → tokens
Unified Incentives - Better play = stronger bullets AND more tokens (same formula)
Optimization Gameplay - Replay games strategically to improve key metrics
Natural Evolution - Active skill → hybrid → idle as bullet count grows
No Exploitation - Free, fair, respects player time
Affectionate Parody - Funny throughout without being mean


Success Criteria
MVP is successful if:

Formula system is clear and motivating
Players understand performance → power relationship
Optimization feels rewarding, not tedious
Progression is smooth without grinding walls
Game is completable in 8-10 hours
Performance is stable with 500+ bullets

Core Loop Works When:

Players naturally want to improve game scores
Better performance feels impactful in Space Defender
Token economy encourages both unlocking and optimizing
Automation feels like reward, not replacement for gameplay
